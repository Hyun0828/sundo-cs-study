- 공유 자원(shared resource)
    - 공유된 자원: 메모리나 파일, 전역 변수나 입출력장치
    
    ![image.png](attachment:643c971d-1835-4c6b-9cdc-1a53013e3f3e:image.png)
    
- 임계 구역(critical section)
    - 공유 자원에 접근하는 코드 중 동시에 실행했을 때 문제가 발생할 수 있는 코드
    - 동시에 실행되는 프로세스나 스레드가 동시에 임계 구역에 진입하여 실행되면 문제가 발생할 수 있음
    
    ![image.png](attachment:a671d202-965b-49f0-af45-9c41328a7f59:image.png)
    
- 동시에 파일을 수정하는 스레드
    - 각 스레드들이 파일을 수정하는 과정은 ①파일을 읽고, ②원하는 내용을 작성한 뒤, ③작성한 내용을 저장
        - 초기 파일에 저장된 값이 ‘first’라고 가정, 스레드 A는 ‘thread A’를 추가, 스레드 B는 ‘thread B’추가
            - 스레드 A와 B가 동시에 수행될 경우, 스레드 A의 작업 내역은 반영되지 않을 수 있음
    
    ![image.png](attachment:864da258-fcae-498e-b426-e5768194e6bc:image.png)
    
    - 실행 도중에 다음과 같이 문맥 교환이 발생하는 경우에도 스레드 A의 작업은 반영되지 않을 수 있음
    
    ![image.png](attachment:0ffbf772-3199-4ec4-bbe7-43814b20f126:image.png)
    
- 레이스 컨디션(race condition)
    - 프로세스 혹은 스레드가 동시에 임계 구역의 코드를 실행하여 문제가 발생하는 상황
    - 레이스 컨디션이 발생하면 자원의 일관성이 손상될 수 있음
    2개 이상의 프로세스 혹은 스레드가 임계 영역에 진입하고자 한다면 둘 중 하나는 작업이 끝날 때까지 대기
    - 소스코드
        
        ![image.png](attachment:c0a02ac5-eb83-4f99-abe4-7de5d90ddb7f:image.png)
        
        - 한 스레드는 0으로 초기화된 공유 변수를 10000번 동안 1씩 증가
        - 다른 스레드는 공유 변수를 10000번 동안 1씩 감소
    - 실행 결과
        
        ![image.png](attachment:d35efd1f-83f1-4bda-9433-2477738f3e01:image.png)
        
        - 앞의 두 코드 모두 0이 출력될 것 같지만 일정하지 않은 결과가 도출됨
    - 레이스 컨디션을 방지하면서 임계 구역을 관리하기 위해서는 **프로세스와 스레드가 동기화 필요**
        1. 실행 순서 제어: 프로세스 및 스레드를 올바른 순서로 실행
        2. 상호 배제: 동시에 접근해서는 안되는 자원에 하나의 프로세스 및 스레드만 접근

### 01. 동기화 기법

1. 뮤텍스 락(mutex lock)
    - 동시에 접근해서는 안되는 자원에 상호 배제를 보장하는 동기화 도구
    - 원리
        - 임계 구역에 접근하고자 한다면 반드시 락(lock)을 획득(acquire)
        - 임계 구역에서의 작업이 끝났다면 락을 해제(release)
    - 공유 변수, acquire 함수, release 함수로 구현
        - 공유 변수 - 뮤텍스 락의 ‘락’ 역할을 수행
        - acquire() - 락을 획득하기 위한 함수로, 특정 락에 대해 한 번만 호출 가능
        - release() - 획득한 락을 해제하기 위한 함수
        1. 임계 구역 진입: 락을 획득, lock.acquire() 호출
        2. 이후 다른 프로세스 및 스레드가 lock.acquire()을 호출하더라도 락 획득X - 락 해제까지 대기
        3. 임계 구역의 작업 이후: 락을 해제, lock.release() 호출
            - 만약 임계 구역 앞에서 대기하는 프로세스 혹은 스레드가 있었다면 그때서야 비로소 락을 획득하고(lock.acquire() 호출에 성공하고) 임계 구역에 진입
            
            ![image.png](attachment:1cbafb0c-d201-4c9a-a2c3-68a98fa56853:image.png)
            
2. 세마포
    - 공유 자원이 여러 개 있는 상황에서도 동기화가 가능
    - ‘멈춤’ 신호와 ‘가도 좋다’ 신호로 임계 구역 관리
    - 변수와 wait() 함수, signal() 함수로 구성
        1. 변수 s: 사용 가능한 공유 자원의 개수를 나타내는 변수
            - ‘사용 가능한 공유 자원의 개수’는 ‘임계구역에 진입할 수 있는 프로세스의 개수’와 같음
            - 공유 자원의 개수가 s개일 경우, 임계 구역에 진입하여 동시에 실행 가능한 프로세스 혹은 스레드도 s개
        2. wait() 함수: 임계 구역 진입 전 호출하는 함수
        3. signal() 함수: 임계 구역 진입 후 호출하는 함
        - wait() 함수의 구현 원리
            1. ‘사용 가능한 공유 자원의 개수’를 나타내는 변수 s를 1 감소
            2. 변수 s의 값이 0보다 작은지 여부를 확인
            
            (변수 s의 값이 0보다 작으면)
            
            1. wait()를 호출한 프로세스 및 스레드는 대기 상태로 전환되어 임계 구역에 진입할 수 없
            
            ![image.png](attachment:b968e462-a377-4aa7-8c40-e4bff6135cc1:image.png)
            
        - signal() 함수의 구현 원리
            1. ‘사용 가능한 공유 자원의 개수’를 나타내는 변수 s를 1 증가
            2. 변수 s의 값이 0 이하인지 확인
            
            (변수 s의 값이 0 이하이면)
            
            1. 대기 상태로 접어든 프로세스 중 하나를 준비 상태로 전
            
            ![image.png](attachment:1f6e071b-1c36-479c-bfd6-4c95cb907858:image.png)
            
        - ex) 공유자원 2개, 프로세스 3개(P1, P2, P3)
            
            ![image.png](attachment:57a4108f-4040-4e3b-90b3-00d7585f6d62:image.png)
            
            1. 프로세스 P1 wait() 호출, s를 1 감소시키면 s = 1이므로 임계 구역 진입
            2. 프로세스 P2 wait() 호출, s를 1 감소시키면 s = 0이므로 임계 구역 진입
            3. 프로세스 P3 wait() 호출, s를 1 감소시키면 s = -1이므로 대기 상태로 전환
            4. 프로세스 P1 임계 구역 작업 종료, signal() 호출, s를 1 증가시키면 s = 0 이므로 대기 상태였던 P3를 준비 상태로 전환
            5. 깨어난 프로세스 P3 임계 구역 진입
            6. 프로세스 P2 임계 구역 작업 종료. signal() 호출, s를 1 증가시키면 s = 1
            7. 프로세스 P3 임계 구역 작업 종료. signal() 호출, s를 1 증가시키면 s = 2
    - 이진 세마포(binary semaphore)
        - 0과 1을 가지는 세마포
        - 사실상 뮤텍스 락과 유사하게 동작
    - 카운팅 세마포(counting semaphore)
        - 이전까지 다룬 세마포
3. 조건 변수와 모니터
    - 조건 변수 - 실행 순서 제어를 위한 동기화 도구
        - 특정 조건 하에 프로세스를 실행/일시 중단함으로써 프로세스나 스레드의 실행 순서를 제어
        - 조건 변수에 대해 wait()와 signal() 함수를 호출할 수 있음
            - wait() 함수 - 호출한 프로세스 및 스레드의 상태를 대기 상태로 전환
            - signal() 함수 - wait()로 일시 중지된 프로세스 및 스레드의 실행 재개
        - 아직 특정 프로세스가 실행될 조건이 되지 않았을 때는 wait()를 통해 중단
        - 특정 프로세스가 실행될 조건이 충족되었을 때는 signal()을 통해 실행 재개
        - ex) cv라는 조건 변수, 프로세스 P1의 실행 도중 조건 변수 cv에 대해 wait() 함수 호출
        
        ![image.png](attachment:a0a90133-2beb-4098-8cfa-20ac35c5dd57:image.png)
        
        - 해당 프로세스는 다른 스레드가 cv.signal()을 호출하기 전까지 대기 상태
    - 모니터 - 공유 자원과 그 공유 자원을 다루는 함수(인터페이스)로 구성된 동기화 도구
        - 상호 배제를 위한 동기화뿐만 아니라 실행 순서 제어를 위한 동기화까지 가능
        - 모니터의 작동 원리
            - 프로세스 및 스레드는 공유 자원에 접근하기 위해 반드시 정해진 공유 자원 연산(인터페이스)을 통해 모니터 내로 진입해야 하고, 모니터 안에 진입하여 실행되는 프로세스 및 스레드는 항상 하나여야 함
            - 이미 모니터 내로 진입하여 실행중인 프로세스 및 스레드가 있다면 큐에서 대기
            
            ![image.png](attachment:0f6c5126-870c-412b-ab8e-9984c9f12389:image.png)
            
        - 조건 변수를 함께 활용하면 실행 순서 제어를 위한 동기화 구현 가능
            - ex) 동시에 실행되는 프로세스 A, B 중 반드시 A가 먼저 실행되고, 다음으로 B가 실행되어야 할 경우
                - 프로세스 B는 모니터 내에서 실행되기에 앞서 프로세스 A의 실행이 끝났는지 검사
                - 프로세스 B가 프로세스 A보다 나중에 모니터 내로 진입했을 경우, 실행 순서 조건이 이미 충족. 프로세스 B는 모니터 내로 진입하여 실행
                - 만약 프로세스 B가 프로세스 A보다 먼저 모니터 내로 진입했을 경우
                    - 프로세스 A가 먼저 실행되고 B가 실행되어야 하는 조건에 어긋남
                    - 조건 변수 cv에 대해 cv.wait()를 호출하여 프로세스 B를 대기 상태로 접어들게 할 수 있음
                
                ![image.png](attachment:5cb1da42-1a7b-43fa-9ea0-7dd7b2250616:image.png)
                
4. 스레드 안전
    - 멀티스레드 환경에서 어떤 변수나 함수, 객체에 동시 접근이 이루어져도 실행에 문제가 없는 상태
    - 자바 예제 코드
        - 자바 Vector 클래스의 add 메서드는 스레드 안정성 보장
            - add 메서드를 구현한 코드는 모니터 기반의 동기화를 제공하는 synchronized 키워드로 구현
            - 여러 스레드가 동시에 실행되어도 안전
        
        ![image.png](attachment:5c89302f-e3ae-4208-8b0f-64418f56ba8d:image.png)
        
        - 자바 ArrayList 클래스의 add 메서드는 스레드 안정성이 보장되지 않음
            - 코드 내부에 synchronized 메서드가 없음
            - 여러 스레드가 동시에 실행함녀 레이스 컨디션이 발생할 수 있음
        
        ![image.png](attachment:083b8a68-f064-47fc-a139-0447dbb0c0b1:image.png)
        

### 02. 교착 상태

- 교착상태(deadlock) - 일어나지 않을 사건을 기다리며 프로세스의 진행이 멈춰 버리는 현상
    - ex) 프로세스 A는 자원 X를 점유한 채 프로세스 B가 점유하고 있는 자원 Y의 사용이 끝나기를 기다림
    - B도 자원 Y를 점유한 채 프로세스 A가 점유하고 있는 자원 X의 사용이 끝나기를 기다림
    - 두 프로세스는 서로 자원을 기다리다가 프로세스를 실행하지 못할 수 있음
    → 교착 상태 발생
    
    ![image.png](attachment:522fbff1-6bca-42e8-b7eb-5ac9066ece47:image.png)
    
- 교착 상태의 발생 조건
    - 4개의 조건이 모두 만족할 때 데드락이 발생할 가능성이 생김
    1. 상호 배제
        - 한 프로세스가 사용하는 자원을 다른 프로세스가 사용할 수 없는 상호 배제의 상황
    2. 점유와 대기
        - 한 프로세스가 어떤 자원을 할당받은 상태(점유)에서 다른 자원 할당받기를 대기
    3. 비선점
        - 자원이 비선점 - 해당 자원을 이용하는 프로세스의 작업이 끝나야만 비로소 자원을 이용할 수 있음
        - 어떤 프로세스도 다른 프로세스의 자원을 강제로 빼앗지 못하는 경우 교착 상태 방생
    4. 원형 대기
        - 프로세스와 프로세스가 요청한 자원이 원의 형태를 이루는 경우
        - 각각의 프로세스가 서로 점유한 자원을 할당받기 위해 원의 형태로 대기할 경우 교착 상태 발생
- 교착 상태의 해결 방법
    1. 교착 상태 예방
        - 애초에 교착 상태의 발생 조건에 부합하지 않도록 자원을 분배하는 방식으로 교착 상태 예방
        - 4가지 필요 조건 중 하나를 충족하지 못하게 하는 방
    2. 교착 상태 회피
        - 교착 상태가 발생하지 않을 정도로 조금씩 자원을 할당하다가 교착상태의 위험이 있을 때 자원을 할당하지 않는 방식
        - 참고: 은행원 알고리즘
    3. 검출 후 회복
        - 자원을 제약 없이 할당하다가 교착 상태를 검출한 후 회복
            - 운영체제는 프로세스가 자원을 요구할 때마다 그때 그때 자원을 할당하고 주기적으로 교착 상태의 발생 여부를 검사
            - 교착 상태가 검출되면 프로세스를 자원 선점을 통해 회복시키거나, 교착 상태에 놓은 프로세스를 강제로 종료함으로써 회복
